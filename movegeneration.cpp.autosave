#include "movegeneration.h"

//vector of all possible moves for one side
std::vector<int> possibleMoves;

moveGeneration::moveGeneration()
{

    //ai is black ~ possibly replace player moves set too
    for(int i = 0; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if(boardArr[i][j] == "p"){
                blackPawn(j , i);
            }else if(boardArr[i][j] == "r"){
                rook(j , i);
            } else if(boardArr[i][j] == "n"){
                knight(j, i);
            }else if(boardArr[i][j] == "b"){
                bishop(j, i);
            } else if(boardArr[i][j] == "q"){
                queen(j, i);
            } else if(boardArr[i][j] == "k"){
                king(j, i);
            }
        }
    }
}



void moveGeneration::blackPawn(int x, int y)
{
    std::string tx = std::to_string(x), ty = std::to_string(y);
    //move forward one 
    if(boardArr[y+1][x] == " "){
        pushMoves(x, y, x, y+1);       
    }
    //or two first turn
    if(y == 1 && boardArr[y+1][x] == " " && boardArr[y+2][x] == " "){
        pushMoves(x, y, x, y+2);    
    }
    //take out side-wase left
    if(boardArr[y+1][x-1] != " "){
        pushMoves(x, y, x-1, y+1);       
    }
    //right take out
    if(boardArr[y+1][x+1] != " "){
        pushMoves(x, y, x+1, y+1);   
    }

}

void moveGeneration::rook(int x, int y)
{
    //up
    for(int i = y-1; i > 0; i--){
        pushMoves(x, y, x, i);
    }
    //down
    for(int i = y+1; i < 8; i++){
        pushMoves(x, y, x, i);
    }
    //left
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, y);
    }
    //right
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, y);
    }
}

void moveGeneration::knight(int x, int y)
{

}

void moveGeneration::bishop(int x, int y)
{   
    
    //up left
    int tmp = y-1;
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, tmp); 
        tmp -= 1;
    }
    
    //up right
    tmp = y-1;
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, tmp); 
        tmp -= 1;
    }
    
    //down right
    tmp = y + 1;
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, tmp);
        tmp += 1;
    }
    
    //down left
    tmp = y + 1;
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, tmp);
        tmp += 1;
    }
               
}

void moveGeneration::queen(int x, int y)
{
    //up
    for(int i = y-1; i > 0; i--){
        pushMoves(x, y, x, i);
    }
    //down
    for(int i = y+1; i < 8; i++){
        pushMoves(x, y, x, i);
    }
    //left
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, y);
    }
    //right
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, y);
    }
    
    //up left
    int tmp = y-1;
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, tmp); 
        tmp -= 1;
    }
    
    //up right
    tmp = y-1;
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, tmp); 
        tmp -= 1;
    }
    
    //down right
    tmp = y + 1;
    for(int i = x+1; i < 8; i++){
        pushMoves(x, y, i, tmp);
        tmp += 1;
    }
    
    //down left
    tmp = y + 1;
    for(int i = x-1; i > 0; i--){
        pushMoves(x, y, i, tmp);
        tmp += 1;
    }
    
}

void moveGeneration::king(int x, int y)
{
    //up 
    pushMoves(x, y, x, y-1);
    // down
    pushMoves(x, y, x, y+1);
    //left
    pushMoves(x, y, x-1, y);
    //right
    pushMoves(x, y, x+1, y);
    //up left
    pushMoves(x, y, x-1, y-1);
    // up right
    pushMoves(x, y, x+1, y-1);
    //down right
    pushMoves(x, y, x+1, y+1);
    //down left
    pushMoves(x, y, x-1, y+1);
}


void moveGeneration::pushMoves(int x, int y, int x2, int y2){
    possibleMoves.push_back(x);  
    possibleMoves.push_back(y);
    possibleMoves.push_back(x2);
    possibleMoves.push_back(y2);
}

void moveGeneration::resetPossibleMoves()
{
    possibleMoves.clear();        
}

void moveGeneration::returnMove()
{
    
}


